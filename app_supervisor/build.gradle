apply plugin: 'com.android.application'
apply plugin: 'packer'
apply plugin: 'org.quanqi.pgyer'
apply from: "$rootDir/util.gradle"

def appName = 'supervisor'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"
    defaultConfig {
        applicationId 'com.jianfanjia.cn.supervisor'
        minSdkVersion 15
        targetSdkVersion 23

        versionCode Integer.parseInt(APP_SUPERVISOR_VERSION_CODE)
        versionName APP_SUPERVISOR_VERSION_NAME
    }

    //签名
    signingConfigs {
        relealse {
            storeFile file("jianfanjia.keystore")
            storePassword KEYSTORE_PASSWORD
            keyAlias "jianfanjia"
            keyPassword KEY_PASSWORD
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.relealse

            manifestPlaceholders = [SERVER_URL      : DEV_SERVER_URL, MOBILE_SERVER_URL: DEV_MOBILE_SERVER_URL]
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.relealse
            manifestPlaceholders = [SERVER_URL      : RELEASE_SERVER_URL, MOBILE_SERVER_URL: RELEASE_MOBILE_SERVER_URL]
        }
        andtest {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.relealse

            manifestPlaceholders = [SERVER_URL      : TEST_SERVER_URL, MOBILE_SERVER_URL: TEST_MOBILE_SERVER_URL]
        }
    }
    productFlavors {
        Defalut{
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    //compile 'com.mcxiaoke.gradle:packer-helper:1.0.4'

    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.2.1'
    compile 'com.android.support:design:23.2.1'

    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'de.greenrobot:eventbus:2.4.0'
    compile project(':hud')
    compile project(':api')
    compile 'com.commit451:PhotoView:1.2.4'
    compile 'com.yalantis:ucrop:1.2.1'
    compile project(':photopicker')
    compile 'com.android.support:appcompat-v7:23.2.0'
    compile 'com.android.support:support-v4:23.2.0'
    compile 'com.android.support:cardview-v7:23.2.0'
    compile 'com.android.support:design:23.2.0'
    compile 'com.android.support:recyclerview-v7:23.2.0'
    compile project(':pulltorefresh')
    compile project(':common')
    compile project(':imageshow')
}

packer {
    manifestMatcher = ['UMENG_CHANNEL']
    archiveNameFormat = getApkNameFormat(appName, APP_SUPERVISOR_FORCE_UPDATE, APP_SUPERVISOR_VERSION_CODE, APP_SUPERVISOR_VERSION_NAME)
    archiveOutput = file(getApkDir(appName, APP_SUPERVISOR_VERSION_NAME));
}

task bumpVersion {
    doLast {
        println 'start to update supervisor user version'
        def newVersionName = bumpVersionName(APP_SUPERVISOR_VERSION_NAME, rtype);
        def newVersionCode = bumpVersionCode(APP_SUPERVISOR_VERSION_CODE);
        def fileContent = readFile(getPropertiesFile());
        def newContent = replaceValue(fileContent, 'APP_SUPERVISOR_VERSION_NAME', newVersionName);
        newContent = replaceValue(newContent, 'APP_SUPERVISOR_VERSION_CODE', newVersionCode);
        write2File(getPropertiesFile(), newContent);
        println 'start to update supervisor user version'
    }
}
bumpVersion.shouldRunAfter {
    getAllAssembleTask(':app_supervisor');
}

task tag() {
    doLast {
        gitTag(appName, APP_SUPERVISOR_VERSION_NAME);
    }
}
tag.shouldRunAfter(bumpVersion);

pgyer {
    _api_key = PGY_API_KEY
    uKey = PGY_UKEY
}
task configPgy() {
    doLast {
        apks {
            andtest {
                def app = getLatestPgyapp(appName);
                if (app != null) {
                    sourceFile = file(app);
                }
            }
        }
    }
}
tasks.uploadPgyer.dependsOn(configPgy);
tasks.uploadPgyer.shouldRunAfter(tag);


